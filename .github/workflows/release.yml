---
name: flower-generator-publish-to-galaxy

# Workflow Secrets:
# SLACK_WEBHOOK              (Required, for slack notifications...)
# GALAXY_API_KEY             (Required, for Ansible Galaxy Import...)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      TAG:
        description: 'Tag to Deploy'
        required: true
        default: ''

env:
  PROJECT_NAME: "flower-generator"
  PYTHON_VERSIONS: '["3.9"]'
  USERNAME: "niall-byrne"


jobs:

  publish_to_galaxy:

    runs-on: ubuntu-latest

    steps:

      - name: Publish to Galaxy -- Code Checkout (workflow dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: 'role'
          ref: ${{ github.event.inputs.TAG  }}

      - name: Publish to Galaxy -- Code Checkout (published release)
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: 'role'

      - name: Publish to Galaxy -- Setup Environment
        run: |
          source .github/scripts/setup.sh
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Publish to Galaxy -- Install Poetry
        run: |
          source ./role/.github/scripts/poetry.sh

      - name: Publish to Galaxy -- Set up Python ${{ toJSON(env.PYTHON_VERSIONS)[0] }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ toJSON(env.PYTHON_VERSIONS)[0] }}

      - name: Publish to Galaxy -- Initialize Cache Locations
        run: |
          mkdir -p ~/.cache/pypoetry/virtualenvs/

      - name: Publish to Galaxy -- Mount Poetry Cache
        uses: actions/cache@v3
        with:
          key: poetry-${{ hashFiles('./role/pyproject.toml') }}-${{ runner.os }}-${{ env.CACHE_TTL }}
          path: ~/.cache/pypoetry/virtualenvs/

      - name: Publish to Galaxy -- Install Requirements
        run: |
          cd role
          poetry install

      - name: Publish to Galaxy -- Trigger Ansible Galaxy Import
        run: |
          cd role
          poetry run ansible-galaxy role import ${USERNAME} ${PROJECT_NAME} --token ${API_KEY}
        env:
          API_KEY: ${{ secrets.GALAXY_API_KEY }}

      - name: Publish to Galaxy -- Report Job Status (Success)
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":white_check_mark: automated ansible galaxy import has been completed!"

      - name: Publish to Galaxy -- Report Job Status (Failure)
        if: failure()
        run: |
          ./role/.github/scripts/notifications.sh "${NOTIFICATION}" ":x: automated ansible galaxy import has failed!"
